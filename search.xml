<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2020/08/04/Redis/"/>
      <url>/2020/08/04/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis基础使用"><a href="#Redis基础使用" class="headerlink" title="Redis基础使用"></a>Redis基础使用</h2><p><strong>1.在linux上启动redis服务</strong></p><p><img src= "/img/loading.gif" data-lazy-src="F:\redis\1595293620428.png" alt="1595293620428"></p><p><strong>2.对redis在linux上进行测试连接</strong></p><h3 id=""><a href="#" class="headerlink" title=""></a><img src= "/img/loading.gif" data-lazy-src="F:\redis\1595293788233.png" alt="1595293788233"></h3><p><strong>3.查看redis是否启动</strong></p><p><img src= "/img/loading.gif" data-lazy-src="F:\redis\1595294037440.png" alt="1595294037440"></p><p><strong>4.进入到redis配置文件内</strong></p><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595296294759.png" alt="1595296294759"></p><p>*<em>5.Redis默认有16个数据库**</em></p><p><strong><em>（可以通过select来去切换数据库 一般当前都是使用的第 0个数据库）</em></strong></p><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595296500657.png" alt="1595296500657"></p><p><strong>6.redis基础命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-select 3  <span class="comment"># 切换到第三个数据库</span></span><br><span class="line">-DBSIZE  <span class="comment"># 查看当前redis数据库的使用空间大小</span></span><br><span class="line">-keys *  <span class="comment"># 查看数据库所有的key</span></span><br><span class="line">-flushdb  <span class="comment"># 清空当前库的key</span></span><br><span class="line">-flushall <span class="comment"># 清空所有库里面的key</span></span><br><span class="line">-EXISTS name   <span class="comment">#判断当前key是否存在</span></span><br><span class="line">-EXPIRE name 10  <span class="comment">#给key设置过期时间  单位是秒</span></span><br><span class="line">-ttl name  <span class="comment">#查看当前key还有多少时间到期</span></span><br><span class="line">-move name 1 <span class="comment">#移除当前的key</span></span><br><span class="line">-<span class="built_in">type</span> name  <span class="comment">#查看当前key的类型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>Redis 是单线程！</strong></p><p> <u>官方表示redis是基于内存操作的，CPU不是redis性能瓶颈，redis的瓶颈是根据机器的内存和网络带宽</u></p><p>Redis是通过C语言来写的</p></blockquote><h2 id="Redis–String类型"><a href="#Redis–String类型" class="headerlink" title="Redis–String类型"></a>Redis–String类型</h2><p><strong>1.基本命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-append key1 <span class="string">&quot;hello&quot;</span> <span class="comment">#追加字符串，如果当前的不存在就相当于是set key</span></span><br><span class="line">-strlen key1 <span class="comment">#获取当前key的长度</span></span><br></pre></td></tr></table></figure><p><strong>2.循环命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-incr views <span class="comment">#自增一</span></span><br><span class="line">-decr views <span class="comment">#自减一</span></span><br><span class="line">-incrby views 10   <span class="comment">#可以设置步长，指定增量</span></span><br><span class="line">-decrby views 5    <span class="comment">#可以设置步长，指定减量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.区间命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-getrange key 0 1 <span class="comment">#取key中0到1之内的数据（截取字符串）</span></span><br><span class="line"></span><br><span class="line">-setrange key 1 xx  <span class="comment">#替换指定位置开始的字符串 </span></span><br></pre></td></tr></table></figure><p><strong>4.其它命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-setex (<span class="built_in">set</span> with expire) <span class="comment">#设置过期时间 setex key 30 &quot;hello&quot;</span></span><br><span class="line">-setnx (<span class="built_in">set</span> <span class="keyword">if</span> not exist) <span class="comment">#不存在设置(在分布式锁中常常用到) </span></span><br><span class="line">setnx key1 <span class="string">&quot;110&quot;</span>(如果key1存在就不成功，如果不存在则和<span class="built_in">set</span> key一样)</span><br><span class="line"></span><br><span class="line">-mset key1 v1 key2 v2 <span class="comment">#同时设置多个值</span></span><br><span class="line">-mget key1 key2  <span class="comment">#同时获取多个值</span></span><br><span class="line">-msetnx key1 v1 key3 v3 <span class="comment">#msetnx是一个原则型上的操作，要么一起成功，要么一起失败</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595383242851.png" alt="1595383242851"></p><p><strong>5.定义一个对象</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-<span class="built_in">set</span> user:1 &#123;name:<span class="string">&quot;zhangsan&quot;</span>,age:3&#125; <span class="comment">#设置一个user:1 对象 值为 json字符来保存一个对象</span></span><br><span class="line"></span><br><span class="line">-mset user:1:name <span class="string">&quot;zhangsan&quot;</span> user:1:age 2 </span><br><span class="line">-mget user:1:name user:1:age</span><br></pre></td></tr></table></figure><p><strong>6.特殊命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getset <span class="comment">#先get再set</span></span><br><span class="line"></span><br><span class="line">-getset boy redis <span class="comment">#如果不存在值，则返回nil。如果存在值，则返回原来的值，并设置新的值并替换之前的值</span></span><br></pre></td></tr></table></figure><h2 id="Redis–List类型"><a href="#Redis–List类型" class="headerlink" title="Redis–List类型"></a>Redis–List类型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">所有List命令都是L开头</span><br><span class="line">-lpush list one <span class="comment">#将一个值或者多个值，插入到列表头部（左）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595404242696.png" alt="1595404242696"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Rpush list right <span class="comment">#将一个值或者多个值，插入到列表尾部（右）</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595404379353.png" alt="1595404379353"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Lpop list</span><br><span class="line">-Rpop list</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595404531016.png" alt="1595404531016"></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-Lindex list 1 <span class="comment">#通过下标获取list的某一个值</span></span><br><span class="line">-Llen list <span class="comment">#判断当前list的长度</span></span><br><span class="line"> </span><br><span class="line">-lrem list 1(<span class="string">&quot;为移除的个数&quot;</span>) one <span class="comment">#移除list集合中指定个数的value，这是一个精确匹配</span></span><br><span class="line"></span><br><span class="line">-ltrim list 1 2 <span class="comment">#通过下标来截取指定的长度，这个list会被改变， list里面只剩下了截取的元素</span></span><br><span class="line"></span><br><span class="line">-rpoplpush list list1 <span class="comment">#移除list列表的中的左后第一个值，并将移除的数据移动到新的列表list1中</span></span><br><span class="line"></span><br><span class="line">-lset list 0 <span class="string">&quot;item&quot;</span> <span class="comment">#将列表中指定下标的值替换为另一个值，相当于是一个update操作(如果这个list列表不存在我们所指定的下标就会报错)</span></span><br><span class="line"></span><br><span class="line">-linsert  <span class="comment">#将某一个具体的value插入到列表中某个元素的前面或者后面</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595406907314.png" alt="1595406907314"></p><h2 id="Redis–Set类型"><a href="#Redis–Set类型" class="headerlink" title="Redis–Set类型"></a>Redis–Set类型</h2><p><strong>set中的值是不能够重复的</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-sadd list hello <span class="comment">#set集合中添加元素</span></span><br><span class="line"></span><br><span class="line">-smembers list <span class="comment">#查看set的所有值</span></span><br><span class="line"></span><br><span class="line">-sismember list hello <span class="comment">#判断某一个值是否在set集合中</span></span><br><span class="line"></span><br><span class="line">-scard list <span class="comment">#获取set集合里面值的个数</span></span><br><span class="line"></span><br><span class="line">-srem list hello <span class="comment">#移除set中的某一个元素</span></span><br><span class="line"></span><br><span class="line">-srandmember myset  2(随机抽取指定个数) <span class="comment">#随机抽取出一个元素</span></span><br><span class="line"></span><br><span class="line">-spop myset <span class="comment">#随机删除set集合中元素</span></span><br><span class="line"></span><br><span class="line">-smove list list2 hello <span class="comment">#移动指定的元素到另一个set集合中（另一个集合不能为空）</span></span><br></pre></td></tr></table></figure><p><strong>set是一个无序不重复的集合</strong></p><p><strong>数字集合类</strong>：</p><p>–  差集   SDIFF  list list1   ( list和list1比较查看list1相对于list中没有的元素 ) </p><p>–  交集   SINTER  list  list1   (二个集合中相同的值)</p><p>–  并集   SUNION  list list1 （二个集合的值都查询出来）</p><h2 id="Redis–Hash类型"><a href="#Redis–Hash类型" class="headerlink" title="Redis–Hash类型"></a>Redis–Hash类型</h2><p><strong>Hash 就是一个Map集合&lt;key, value&gt;，本质和String没有太大区别，还是一个简单的集合&lt;key, value&gt;</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-hset hashs key1 kuangshen  <span class="comment">#set一个具体的key-value</span></span><br><span class="line"></span><br><span class="line">-hget hashs key1  <span class="comment">#get这个key里面的值</span></span><br><span class="line"></span><br><span class="line">-hmset hashs key1 hello key2 world  <span class="comment">#set 多个key-value值 如果key里面有值则替换 没有则和set一样</span></span><br><span class="line"></span><br><span class="line">-hmget hashs key1 key2  <span class="comment">#获取多个key中的值</span></span><br><span class="line"></span><br><span class="line">-hgetall  hashs <span class="comment">#获取hash中全部的数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595555512744.png" alt="1595555512744"></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-hdel hahs key1 <span class="comment">#删除hash中指定的key字段！对应的value也就没有了</span></span><br><span class="line"></span><br><span class="line">-hlen hashs  <span class="comment">#获取hash表中的字段数量</span></span><br><span class="line"></span><br><span class="line">-hexists hashs  key1 <span class="comment">#判断hash中指定的key是否存在 </span></span><br><span class="line"></span><br><span class="line">-hkeys hashs  <span class="comment">#获取该Hash中所有的key</span></span><br><span class="line">-hvals hashs  <span class="comment">#获取该Hash中所有的value</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595850391900.png" alt="1595850391900"></p><h2 id="Redis–Zset"><a href="#Redis–Zset" class="headerlink" title="Redis–Zset"></a>Redis–Zset</h2><p><strong>Zset(有序集合)</strong> 在set的基础上，增加了一个值 ，zset k1 score1(排序标识 对其进行分组) “hello”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-zadd key 1 one  <span class="comment">#添加一个值</span></span><br><span class="line">-zadd key 2 two 3 three  <span class="comment">#添加多个值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################</span></span><br><span class="line">排序</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595851442026.png" alt="1595851442026"></p><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595852267438.png" alt="1595852267438"></p><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595851615634.png" alt="1595851615634"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#######################################################</span></span><br><span class="line"> </span><br><span class="line"> 移除rem中的元素</span><br><span class="line"> -zrem salary xiaohong <span class="comment">#移除有序集合中的指定元素</span></span><br><span class="line"> </span><br><span class="line"> -zcard salary <span class="comment">#获取有序集合中的个数 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#######################################################</span></span><br><span class="line"> 获取指定区间的成员数量</span><br><span class="line"> -zcount key 1 2 (2个)</span><br></pre></td></tr></table></figure><h2 id="三大特殊数据类型"><a href="#三大特殊数据类型" class="headerlink" title="三大特殊数据类型"></a>三大特殊数据类型</h2><h3 id="1-geospatial-地理位置"><a href="#1-geospatial-地理位置" class="headerlink" title="1.geospatial 地理位置"></a>1.geospatial 地理位置</h3><p>Redis的Geo, 这个功能可以推算地理位置的信息，两地之间的距离，方圆半径里的人。</p><p>只有六个命令</p><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595898057286.png" alt="1595898057286"></p><blockquote><p>1.geoadd</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#geoadd 添加地理位置</span></span><br><span class="line"><span class="comment">#规则：两级无法知己添加，我们一般会下载城市数据，直接导入java程序一次性导入</span></span><br><span class="line"><span class="comment">#参数：key 值（经度 纬度 名称）</span></span><br><span class="line">-geoadd china:city 116.40 39.90 beijing</span><br><span class="line">-geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen</span><br></pre></td></tr></table></figure><blockquote><p>2.geopos</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-geopos china:city beijing <span class="comment">#获取指定城市的经度和纬度</span></span><br></pre></td></tr></table></figure><p><strong>3.geodist</strong></p><blockquote><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595901226486.png" alt="1595901226486"></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获取二人之间的距离</span><br><span class="line">-geodist china:city beijing chongqing <span class="comment">#直线距离</span></span><br><span class="line">-geodist china:city beijing chongqing km <span class="comment">#单位换成千米</span></span><br></pre></td></tr></table></figure><p><strong>4.georadius以给定的经纬度为中心，找出某一半径内的元素</strong></p><p>所有数据也应该都录入到china：city中，才能使结果更加清晰</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-georadius china:city 110 30 500 km <span class="comment">#以这个经纬度为中心寻找方圆500km内的地址名称 且必须在这个集合中</span></span><br><span class="line">-georadius china:city 110 30 500 km withdist <span class="comment">#以这个经纬度为中心寻找方圆500km内的地址名称和与给出位置的直线距离</span></span><br><span class="line">-georadius china:city 110 30 500 km withcoord <span class="comment">#以这个经纬度为中心寻找方圆500km内的地址名称和其的经纬度</span></span><br><span class="line">-georadius china:city 110 30 500 km withcoord count 1 <span class="comment">#只能显示出一条数据</span></span><br></pre></td></tr></table></figure><p><strong>5.georadiusbymember找出位于指定元素周围的其它元素</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-georadiusbymember china:city beijing 100 km <span class="comment">#以这个元素为中心寻找方圆500km内的地址名称 且必须在这个集合中</span></span><br><span class="line">-georadiusbymember china:city  chongqing 1000 km</span><br></pre></td></tr></table></figure><h3 id="2-Hyperloglog"><a href="#2-Hyperloglog" class="headerlink" title="2.Hyperloglog"></a>2.Hyperloglog</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2020/08/04/redis/redis%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E4%B8%AD/"/>
      <url>/2020/08/04/redis/redis%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="linux下安装redis"><a href="#linux下安装redis" class="headerlink" title="linux下安装redis"></a>linux下安装redis</h1><p>link解压文件夹命令： tar -zxvf 压缩包名</p><p>基本的环境安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看</span></span><br><span class="line">gcc -v</span><br><span class="line"><span class="comment">#命令 make命令</span></span><br><span class="line">make</span><br><span class="line"><span class="comment">#确认安装命令</span></span><br><span class="line">make install</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>默认后台是不启动redis的，修改config文件   找到daemonize  改为yes</p><h1 id="Redis-maven配置："><a href="#Redis-maven配置：" class="headerlink" title="Redis maven配置："></a><strong>Redis maven配置：</strong></h1><!--  springboot整合 redis --><dependency>    <groupId>org.springframework.boot</groupId>    <artifactId>spring-boot-starter-data-redis</artifactId></dependency><p><strong>SpringBoot 配置文件 配置redis 信息</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">redis:</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line">    port: 6379</span><br><span class="line">    password: 123456</span><br><span class="line">    pool:</span><br><span class="line">      max-active: 8</span><br><span class="line">      max-wait: 1</span><br><span class="line">      max-idle: 8</span><br><span class="line">      min-idle: 0</span><br><span class="line">    timeout: 0</span><br></pre></td></tr></table></figure><p><strong>在实用类中注入：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;Object, Object&gt; redisTemplate ;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate ;</span><br></pre></td></tr></table></figure><p><strong>实体序列化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>字符串序列化器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RedisSerializer redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">redisTemplate.setKeySerializer(redisSerializer);</span><br></pre></td></tr></table></figure><p><strong>在高并发情况下，缓存穿透：</strong></p><p>​    方式一： synchronized 可以实现，效率低一点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> List&lt;User&gt; <span class="title">getUSerList</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>​    方式二：效率高点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList = (List&lt;User&gt;)redisTemplate.opsForValue().get(<span class="string">&quot;allUSers&quot;</span>);</span><br><span class="line"><span class="comment">//双重检测锁</span></span><br><span class="line"><span class="keyword">if</span>(userList == <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">        userList = (List&lt;User&gt;)redisTemplate.opsForValue().get(<span class="string">&quot;allUSers&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span>(<span class="keyword">null</span> == userList)&#123;</span><br><span class="line">             userList = userMapper.selectAllUser();</span><br><span class="line">             redisTemplate.opsForValue().set(<span class="string">&quot;allUSers&quot;</span>,userList);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>多线程测试缓存穿透:</strong></p><p>​    Executors:是一个工具类用于并发编程</p><p>​    newFixedThreadPool：是一个线程值  ，根据CPU核心数决定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程，该线程电泳底层查询用户的方法</span></span><br><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userSertvice.getAllUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ExecutorService  executorService = Executors.newFixedThreadPool(<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> i&lt;<span class="number">10000</span>; i++)&#123;</span><br><span class="line">    executorService.submit(runnable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Redis主从复制</strong></p><p>​    <strong>环境配置</strong>     只配置从库不用配置主库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;info replication <span class="comment">#查看当前库的信息</span></span><br></pre></td></tr></table></figure><p>​    复制3个配置文件，然后修改对应的信息</p><p>​    1、端口</p><p>​    2、pid名字</p><p>​    3、log文件名字</p><p>​    4、dump.rdb名字</p><p>启动redis命令：redis-server kconfig/redis80.conf</p><p>连接客户端命令：redis-cli -p 6379</p><p>查看redis进程命令： ps -ef|grep redis</p><p>断掉redis命令：SHUTDOWN</p><p><strong>一主二从</strong></p><p>认老大：命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6380&gt;SLAVEOF 127.0.0.1 6379 <span class="comment">#SLAVEOF host 6379 认老大</span></span><br><span class="line">127.0.0.1:6380&gt;SLAVEOF no one <span class="comment">#自己当老大</span></span><br></pre></td></tr></table></figure><p>真实的主从复制应该在文件中配置，现在用命令配置只是暂时的。</p><p>进入的config配置文件 找到replication下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#replicaof &lt;masterip&gt;  &lt;masterport&gt; #masterip主机地址 masterport</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#masterauth &lt;master-password&gt;  #如果有密码  master-password</span></span><br></pre></td></tr></table></figure><p><strong>主机可以写 从机只能读</strong></p><p>测试：主机断开连接，从机依旧可以连接的主机，只是没有写了，当主机回来了，从机依旧可以获取到主机写的信息</p><p>若果是命令行认得主机，当从机断开之后，在启动就获取不到主机写的信息，就会变回主机，只要变回从机，立马就可以获取主机的值！</p><p><strong>哨兵模式</strong>：自动选取老大</p><p>配置文件 在config文件夹下修改一个文件命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim sentinel.conf</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">                被监控的名称  host   port  1</span><br><span class="line">sentinel monitor myredis 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure><p>后面的数字1，代表主机挂了,slave投票让谁接替成主机,票数最多的,就会成为主机。</p><p><strong>启动哨兵：</strong></p><p>​    命令：redis-sentinel kconfig/sentinel.conf</p><p><strong>Redis缓存穿透和雪崩</strong></p><h1 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h1><p>String 、List、Set、Hash、SortSet</p><p>String 命令操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;<span class="built_in">set</span> string1 1</span><br><span class="line">127.0.0.1:6379&gt;incr string1  <span class="comment">#string自增操作</span></span><br><span class="line">127.0.0.1:6379&gt;decrby string1 <span class="comment">#string减2操作</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subscribe ITCAST   (订阅某个(ITCAST)主题)</span><br><span class="line"></span><br><span class="line">publish ITCAST &quot;hello word&quot;  (向某个主题（ITCAST）发送消息)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="C:\Users\dell\AppData\Roaming\Typora\typora-user-images\image-20200612151622083.png" alt="image-20200612151622083"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subscribe __keyevent@0__:expired    </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="C:\Users\dell\AppData\Roaming\Typora\typora-user-images\image-20200612153017572.png" alt="image-20200612153017572"></p><p>​    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/08/04/hello-world/"/>
      <url>/2020/08/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2020/08/04/%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/08/04/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2020/08/04/redis/Redis/"/>
      <url>/2020/08/04/redis/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis基础使用"><a href="#Redis基础使用" class="headerlink" title="Redis基础使用"></a>Redis基础使用</h2><p><strong>1.在linux上启动redis服务</strong></p><p><img src= "/img/loading.gif" data-lazy-src="F:\redis\1595293620428.png" alt="1595293620428"></p><p><strong>2.对redis在linux上进行测试连接</strong></p><h3 id=""><a href="#" class="headerlink" title=""></a><img src= "/img/loading.gif" data-lazy-src="F:\redis\1595293788233.png" alt="1595293788233"></h3><p><strong>3.查看redis是否启动</strong></p><p><img src= "/img/loading.gif" data-lazy-src="F:\redis\1595294037440.png" alt="1595294037440"></p><p><strong>4.进入到redis配置文件内</strong></p><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595296294759.png" alt="1595296294759"></p><p>*<em>5.Redis默认有16个数据库**</em></p><p><strong><em>（可以通过select来去切换数据库 一般当前都是使用的第 0个数据库）</em></strong></p><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595296500657.png" alt="1595296500657"></p><p><strong>6.redis基础命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-select 3  <span class="comment"># 切换到第三个数据库</span></span><br><span class="line">-DBSIZE  <span class="comment"># 查看当前redis数据库的使用空间大小</span></span><br><span class="line">-keys *  <span class="comment"># 查看数据库所有的key</span></span><br><span class="line">-flushdb  <span class="comment"># 清空当前库的key</span></span><br><span class="line">-flushall <span class="comment"># 清空所有库里面的key</span></span><br><span class="line">-EXISTS name   <span class="comment">#判断当前key是否存在</span></span><br><span class="line">-EXPIRE name 10  <span class="comment">#给key设置过期时间  单位是秒</span></span><br><span class="line">-ttl name  <span class="comment">#查看当前key还有多少时间到期</span></span><br><span class="line">-move name 1 <span class="comment">#移除当前的key</span></span><br><span class="line">-<span class="built_in">type</span> name  <span class="comment">#查看当前key的类型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>Redis 是单线程！</strong></p><p> <u>官方表示redis是基于内存操作的，CPU不是redis性能瓶颈，redis的瓶颈是根据机器的内存和网络带宽</u></p><p>Redis是通过C语言来写的</p></blockquote><h2 id="Redis–String类型"><a href="#Redis–String类型" class="headerlink" title="Redis–String类型"></a>Redis–String类型</h2><p><strong>1.基本命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-append key1 <span class="string">&quot;hello&quot;</span> <span class="comment">#追加字符串，如果当前的不存在就相当于是set key</span></span><br><span class="line">-strlen key1 <span class="comment">#获取当前key的长度</span></span><br></pre></td></tr></table></figure><p><strong>2.循环命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-incr views <span class="comment">#自增一</span></span><br><span class="line">-decr views <span class="comment">#自减一</span></span><br><span class="line">-incrby views 10   <span class="comment">#可以设置步长，指定增量</span></span><br><span class="line">-decrby views 5    <span class="comment">#可以设置步长，指定减量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.区间命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-getrange key 0 1 <span class="comment">#取key中0到1之内的数据（截取字符串）</span></span><br><span class="line"></span><br><span class="line">-setrange key 1 xx  <span class="comment">#替换指定位置开始的字符串 </span></span><br></pre></td></tr></table></figure><p><strong>4.其它命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-setex (<span class="built_in">set</span> with expire) <span class="comment">#设置过期时间 setex key 30 &quot;hello&quot;</span></span><br><span class="line">-setnx (<span class="built_in">set</span> <span class="keyword">if</span> not exist) <span class="comment">#不存在设置(在分布式锁中常常用到) </span></span><br><span class="line">setnx key1 <span class="string">&quot;110&quot;</span>(如果key1存在就不成功，如果不存在则和<span class="built_in">set</span> key一样)</span><br><span class="line"></span><br><span class="line">-mset key1 v1 key2 v2 <span class="comment">#同时设置多个值</span></span><br><span class="line">-mget key1 key2  <span class="comment">#同时获取多个值</span></span><br><span class="line">-msetnx key1 v1 key3 v3 <span class="comment">#msetnx是一个原则型上的操作，要么一起成功，要么一起失败</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595383242851.png" alt="1595383242851"></p><p><strong>5.定义一个对象</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-<span class="built_in">set</span> user:1 &#123;name:<span class="string">&quot;zhangsan&quot;</span>,age:3&#125; <span class="comment">#设置一个user:1 对象 值为 json字符来保存一个对象</span></span><br><span class="line"></span><br><span class="line">-mset user:1:name <span class="string">&quot;zhangsan&quot;</span> user:1:age 2 </span><br><span class="line">-mget user:1:name user:1:age</span><br></pre></td></tr></table></figure><p><strong>6.特殊命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getset <span class="comment">#先get再set</span></span><br><span class="line"></span><br><span class="line">-getset boy redis <span class="comment">#如果不存在值，则返回nil。如果存在值，则返回原来的值，并设置新的值并替换之前的值</span></span><br></pre></td></tr></table></figure><h2 id="Redis–List类型"><a href="#Redis–List类型" class="headerlink" title="Redis–List类型"></a>Redis–List类型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">所有List命令都是L开头</span><br><span class="line">-lpush list one <span class="comment">#将一个值或者多个值，插入到列表头部（左）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595404242696.png" alt="1595404242696"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Rpush list right <span class="comment">#将一个值或者多个值，插入到列表尾部（右）</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595404379353.png" alt="1595404379353"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Lpop list</span><br><span class="line">-Rpop list</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595404531016.png" alt="1595404531016"></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-Lindex list 1 <span class="comment">#通过下标获取list的某一个值</span></span><br><span class="line">-Llen list <span class="comment">#判断当前list的长度</span></span><br><span class="line"> </span><br><span class="line">-lrem list 1(<span class="string">&quot;为移除的个数&quot;</span>) one <span class="comment">#移除list集合中指定个数的value，这是一个精确匹配</span></span><br><span class="line"></span><br><span class="line">-ltrim list 1 2 <span class="comment">#通过下标来截取指定的长度，这个list会被改变， list里面只剩下了截取的元素</span></span><br><span class="line"></span><br><span class="line">-rpoplpush list list1 <span class="comment">#移除list列表的中的左后第一个值，并将移除的数据移动到新的列表list1中</span></span><br><span class="line"></span><br><span class="line">-lset list 0 <span class="string">&quot;item&quot;</span> <span class="comment">#将列表中指定下标的值替换为另一个值，相当于是一个update操作(如果这个list列表不存在我们所指定的下标就会报错)</span></span><br><span class="line"></span><br><span class="line">-linsert  <span class="comment">#将某一个具体的value插入到列表中某个元素的前面或者后面</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595406907314.png" alt="1595406907314"></p><h2 id="Redis–Set类型"><a href="#Redis–Set类型" class="headerlink" title="Redis–Set类型"></a>Redis–Set类型</h2><p><strong>set中的值是不能够重复的</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-sadd list hello <span class="comment">#set集合中添加元素</span></span><br><span class="line"></span><br><span class="line">-smembers list <span class="comment">#查看set的所有值</span></span><br><span class="line"></span><br><span class="line">-sismember list hello <span class="comment">#判断某一个值是否在set集合中</span></span><br><span class="line"></span><br><span class="line">-scard list <span class="comment">#获取set集合里面值的个数</span></span><br><span class="line"></span><br><span class="line">-srem list hello <span class="comment">#移除set中的某一个元素</span></span><br><span class="line"></span><br><span class="line">-srandmember myset  2(随机抽取指定个数) <span class="comment">#随机抽取出一个元素</span></span><br><span class="line"></span><br><span class="line">-spop myset <span class="comment">#随机删除set集合中元素</span></span><br><span class="line"></span><br><span class="line">-smove list list2 hello <span class="comment">#移动指定的元素到另一个set集合中（另一个集合不能为空）</span></span><br></pre></td></tr></table></figure><p><strong>set是一个无序不重复的集合</strong></p><p><strong>数字集合类</strong>：</p><p>–  差集   SDIFF  list list1   ( list和list1比较查看list1相对于list中没有的元素 ) </p><p>–  交集   SINTER  list  list1   (二个集合中相同的值)</p><p>–  并集   SUNION  list list1 （二个集合的值都查询出来）</p><h2 id="Redis–Hash类型"><a href="#Redis–Hash类型" class="headerlink" title="Redis–Hash类型"></a>Redis–Hash类型</h2><p><strong>Hash 就是一个Map集合&lt;key, value&gt;，本质和String没有太大区别，还是一个简单的集合&lt;key, value&gt;</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-hset hashs key1 kuangshen  <span class="comment">#set一个具体的key-value</span></span><br><span class="line"></span><br><span class="line">-hget hashs key1  <span class="comment">#get这个key里面的值</span></span><br><span class="line"></span><br><span class="line">-hmset hashs key1 hello key2 world  <span class="comment">#set 多个key-value值 如果key里面有值则替换 没有则和set一样</span></span><br><span class="line"></span><br><span class="line">-hmget hashs key1 key2  <span class="comment">#获取多个key中的值</span></span><br><span class="line"></span><br><span class="line">-hgetall  hashs <span class="comment">#获取hash中全部的数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595555512744.png" alt="1595555512744"></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-hdel hahs key1 <span class="comment">#删除hash中指定的key字段！对应的value也就没有了</span></span><br><span class="line"></span><br><span class="line">-hlen hashs  <span class="comment">#获取hash表中的字段数量</span></span><br><span class="line"></span><br><span class="line">-hexists hashs  key1 <span class="comment">#判断hash中指定的key是否存在 </span></span><br><span class="line"></span><br><span class="line">-hkeys hashs  <span class="comment">#获取该Hash中所有的key</span></span><br><span class="line">-hvals hashs  <span class="comment">#获取该Hash中所有的value</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595850391900.png" alt="1595850391900"></p><h2 id="Redis–Zset"><a href="#Redis–Zset" class="headerlink" title="Redis–Zset"></a>Redis–Zset</h2><p><strong>Zset(有序集合)</strong> 在set的基础上，增加了一个值 ，zset k1 score1(排序标识 对其进行分组) “hello”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-zadd key 1 one  <span class="comment">#添加一个值</span></span><br><span class="line">-zadd key 2 two 3 three  <span class="comment">#添加多个值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################</span></span><br><span class="line">排序</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595851442026.png" alt="1595851442026"></p><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595852267438.png" alt="1595852267438"></p><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595851615634.png" alt="1595851615634"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#######################################################</span></span><br><span class="line"> </span><br><span class="line"> 移除rem中的元素</span><br><span class="line"> -zrem salary xiaohong <span class="comment">#移除有序集合中的指定元素</span></span><br><span class="line"> </span><br><span class="line"> -zcard salary <span class="comment">#获取有序集合中的个数 </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#######################################################</span></span><br><span class="line"> 获取指定区间的成员数量</span><br><span class="line"> -zcount key 1 2 (2个)</span><br></pre></td></tr></table></figure><h2 id="三大特殊数据类型"><a href="#三大特殊数据类型" class="headerlink" title="三大特殊数据类型"></a>三大特殊数据类型</h2><h3 id="1-geospatial-地理位置"><a href="#1-geospatial-地理位置" class="headerlink" title="1.geospatial 地理位置"></a>1.geospatial 地理位置</h3><p>Redis的Geo, 这个功能可以推算地理位置的信息，两地之间的距离，方圆半径里的人。</p><p>只有六个命令</p><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595898057286.png" alt="1595898057286"></p><blockquote><p>1.geoadd</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#geoadd 添加地理位置</span></span><br><span class="line"><span class="comment">#规则：两级无法知己添加，我们一般会下载城市数据，直接导入java程序一次性导入</span></span><br><span class="line"><span class="comment">#参数：key 值（经度 纬度 名称）</span></span><br><span class="line">-geoadd china:city 116.40 39.90 beijing</span><br><span class="line">-geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen</span><br></pre></td></tr></table></figure><blockquote><p>2.geopos</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-geopos china:city beijing <span class="comment">#获取指定城市的经度和纬度</span></span><br></pre></td></tr></table></figure><p><strong>3.geodist</strong></p><blockquote><p><img src= "/img/loading.gif" data-lazy-src="Redis.assets/1595901226486.png" alt="1595901226486"></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获取二人之间的距离</span><br><span class="line">-geodist china:city beijing chongqing <span class="comment">#直线距离</span></span><br><span class="line">-geodist china:city beijing chongqing km <span class="comment">#单位换成千米</span></span><br></pre></td></tr></table></figure><p><strong>4.georadius以给定的经纬度为中心，找出某一半径内的元素</strong></p><p>所有数据也应该都录入到china：city中，才能使结果更加清晰</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-georadius china:city 110 30 500 km <span class="comment">#以这个经纬度为中心寻找方圆500km内的地址名称 且必须在这个集合中</span></span><br><span class="line">-georadius china:city 110 30 500 km withdist <span class="comment">#以这个经纬度为中心寻找方圆500km内的地址名称和与给出位置的直线距离</span></span><br><span class="line">-georadius china:city 110 30 500 km withcoord <span class="comment">#以这个经纬度为中心寻找方圆500km内的地址名称和其的经纬度</span></span><br><span class="line">-georadius china:city 110 30 500 km withcoord count 1 <span class="comment">#只能显示出一条数据</span></span><br></pre></td></tr></table></figure><p><strong>5.georadiusbymember找出位于指定元素周围的其它元素</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-georadiusbymember china:city beijing 100 km <span class="comment">#以这个元素为中心寻找方圆500km内的地址名称 且必须在这个集合中</span></span><br><span class="line">-georadiusbymember china:city  chongqing 1000 km</span><br></pre></td></tr></table></figure><h3 id="2-Hyperloglog"><a href="#2-Hyperloglog" class="headerlink" title="2.Hyperloglog"></a>2.Hyperloglog</h3>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
